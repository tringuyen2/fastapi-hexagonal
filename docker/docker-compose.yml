# docker/docker-compose.yml
version: '3.8'

services:
  # Main application (HTTP)
  app-http:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_TYPE=postgresql
      - PG_HOST=postgres
      - PG_DATABASE=fastapi_hexagonal
      - PG_USERNAME=postgres
      - PG_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
    command: python main.py --adapter http
    volumes:
      - ../logs:/app/logs
    restart: unless-stopped

  # Kafka consumer
  app-kafka:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - DATABASE_TYPE=postgresql
      - PG_HOST=postgres
      - PG_DATABASE=fastapi_hexagonal
      - PG_USERNAME=postgres
      - PG_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
    command: python main.py --adapter kafka
    volumes:
      - ../logs:/app/logs
    restart: unless-stopped

  # Celery worker
  app-celery:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - DATABASE_TYPE=postgresql
      - PG_HOST=postgres
      - PG_DATABASE=fastapi_hexagonal
      - PG_USERNAME=postgres
      - PG_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    command: python main.py --adapter celery
    volumes:
      - ../logs:/app/logs
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: fastapi_hexagonal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  # Kafka UI (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka
    restart: unless-stopped

  # Flower for Celery monitoring (optional)
  flower:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    command: celery -A adapters.inbound.celery.worker flower --port=5555
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zk_data:
  zk_logs: